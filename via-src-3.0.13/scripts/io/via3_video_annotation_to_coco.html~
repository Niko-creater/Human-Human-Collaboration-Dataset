<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>VIA Annotation Downloader</title>
    <meta name="author" content="Abhishek Dutta">
<!--
Extract video frames and export region annotations in COCO format for 
a shared VIA3 project containing frame level region annotations of videos.

Author: Abhishek Dutta (adutta@robots.ox.ac.uk)
Date: May 2020
-->
  </head>

  <body>
    <p id="toolbar">
      <label for="via3_project_id_input">VIA3 Shared Project-Id</label>
      <input type="text" id="via3_project_id_input" value="e302eadf-aa53-4a5a-b958-11175692c928" style="width:22em;"/>
      <input type="button" value="Start" onclick="start_process()" />
      <input type="button" value="Cancel" onclick="cancel_process = true;" />
    </p>
    <div style="font-family:mono; width:90vw;" id="log">
    </div>

    <script>
      // USERS SHOULD UPDATE THESE VARIABLES AS REQUIRED
      var SHARED_PROJECT_ID = ''; // video annotator demo project-id
      var VIA3_SERVER = 'http://zeus.robots.ox.ac.uk/via/store/3.x.y/';
      var draw_bbox = false;
      var download_image = false;

      // NOT ESSENTIAL TO UPDATE ANYTHING BEYOND THIS
      const _VIA_ATTRIBUTE_TYPE = { 'TEXT':1, 'CHECKBOX':2, 'RADIO':3, 'SELECT':4, 'IMAGE':5 };
      const _VIA_RSHAPE  = { 'POINT':1, 'RECTANGLE':2, 'CIRCLE':3, 'ELLIPSE':4, 'LINE':5, 'POLYLINE':6, 'POLYGON':7, 'EXTREME_RECTANGLE': 8, 'EXTREME_CIRCLE':9 };
      var COCO_ALLOWED_ATTRIBUTE_TYPE = [ _VIA_ATTRIBUTE_TYPE.RADIO, _VIA_ATTRIBUTE_TYPE.SELECT ];
      var COCO_ALLOWED_RSHAPE = [ _VIA_RSHAPE.RECTANGLE, _VIA_RSHAPE.POLYGON ];
      var frame_canvas = document.createElement('canvas');
      var framedata = {};
      var current_framedata = {};
      var filename_list = [];
      var filename_index = -1;
      var time_list = [];
      var time_index = -1;
      var cancel_process = false;
      var global_annotation_index = 0;

      var ALL_INSECT_TYPE_LIST = {"540":"Bumble bee"};

      var coco = {
        'info': {
          'year':'2020',
          'version':'',
          'description':'VIA3 video frame annotations exported to COCO format',
          'contributor':'',
          'url':'',
          'date_created':'',
        },
        'images': [],
        'annotations':[],
        'categories':[],
        'licenses':[ {'id':0, 'name':'Unknown License', 'url':''} ] // indicates that license is unknown
      };

      function start_process() {
        var pid = document.getElementById('via3_project_id_input').value;
        if(pid === '') {
          document.getElementById('log').innerHTML += 'Enter a valid project-id (e.g. e302eadf-aa53-4a5a-b958-11175692c928)<br/>';
        } else {
          fetch_shared_project(pid, on_via_project_data);
        }
      }

      function fetch_shared_project(pid, response_handler) {
        var via_project_data_url = VIA3_SERVER + pid;
        var xhr = new XMLHttpRequest();
        xhr.addEventListener('load', function() {
          if(xhr.statusText === 'OK') {
            response_handler(xhr.responseText);
          } else {
            document.getElementById('log').innerHTML += 'Malformed server response: ' + xhr.statusText + ': ' + xhr.responseText + '<br/>';
          }
        });
        xhr.addEventListener('timeout', function() {
          document.getElementById('log').innerHTML += 'Server timeout while fetching shared project from ' + via_project_data_url + '<br/>';
        });
        xhr.addEventListener('error', function() {
          document.getElementById('log').innerHTML += 'Error fetching shared project from ' + via_project_data_url + '<br/>';
        });
        document.getElementById('log').innerHTML += 'Fetching VIA3 shared project from ' + via_project_data_url + '<br/>';
        xhr.open('GET', via_project_data_url);
        xhr.send();
      }

      function on_via_project_data(data_str) {
        console.log(data_str)
        var d = JSON.parse(data_str);
        var unknown = [];
        var image_id = 0;

        // add categories
        var attr_option_id_to_category_id = {};
        var unique_category_id = 1;
        for(var aid in d['attribute']) {
          if( COCO_ALLOWED_ATTRIBUTE_TYPE.includes(d['attribute'][aid]['type']) ) {
            for(var attr_option_id in d['attribute'][aid]['options']) {
              var category_id = unique_category_id;
              unique_category_id = unique_category_id + 1;
              coco['categories'].push({
                'supercategory':d['attribute'][aid]['aname'],
                'id':category_id,
                'name':d['attribute'][aid]['options'][attr_option_id]
              });
              attr_option_id_to_category_id[attr_option_id] = category_id;
            }
          }
        }

        for ( var mid in d['metadata'] ) {
          var vid = d['metadata'][mid]['vid'].toString()
          var fid = d['view'][vid]['fid_list'][0]
          var filename = d['file'][fid]['fname']
          if ( ! framedata.hasOwnProperty(filename) ) {
            framedata[filename] = {};
          }
          if(d['metadata'][mid]['z'].length === 1) { // since we only export annotations for a single frame
            var time = d['metadata'][mid]['z'][0];
            if (!framedata[filename].hasOwnProperty(time)) {
              image_id = image_id + 1
              framedata[filename][time] = {
                'image_id':image_id,
                'image_filename':filename + '_' + time.toString().replace('.', '-') + '.jpg',
                'regions':[],
                'av':[],
              };
            }

            if(COCO_ALLOWED_RSHAPE.includes(d['metadata'][mid]['xy'][0])) {
              framedata[filename][time]['regions'].push(d['metadata'][mid]['xy']);
              framedata[filename][time]['av'].push(d['metadata'][mid]['av']);
            }
          }
        }
        filename_list = Object.keys(framedata)[0];
        filename_index = 0;
        global_annotation_index = 1;
        document.getElementById('log').innerHTML += 'Starting extraction of annotations from ' + filename_list.length + ' videos ...<br/>';
        console.log(framedata)
        //extract_all_frames(); // trigger download
      }

      function download_coco_annotations() {
        // download coco annotations as json
        var blob_attr = {type: 'application/json;charset=utf-9'}
        var coco_blob = new Blob([ JSON.stringify(coco) ], blob_attr);
        download_as_file(URL.createObjectURL(coco_blob), 'annotation_coco.json');
      }

      function extract_all_frames() {
        if(cancel_process) {
          document.getElementById('log').innerHTML += '<br/>Cancelled';
          return;
        }

        if (filename_index >= filename_list.length) {
          document.getElementById('log').innerHTML += '<br/>Downloading COCO annotations as JSON';
          download_coco_annotations();
          document.getElementById('log').innerHTML += '<br/>Done';
          return;
        }

        var filename = filename_list[filename_index];
        time_list = Object.keys(framedata[filename]);
        current_framedata = framedata[filename];
        if (time_list.length === 0) {
          filename_index = filename_index + 1;
          extract_all_frames();
        }

        document.getElementById('log').innerHTML += '<br/>[' + (filename_index+1) + '/' + filename_list.length + '] Extracting regions for video ' + filename + ' : ';

        var video = document.createElement('video');
        video.setAttribute('controls', 'false');
        video.setAttribute('playsinline', 'false');
        video.setAttribute('loop', 'false');
        video.setAttribute('preload', 'auto');
        video.setAttribute('crossOrigin', 'Anonumous');

////////////////////////////////////////////////
////////////////////////////////////////////////
// @@@@ todo 9 June 2020
// - set file src to local file (present in current folder)
// - update firefox setting
// - set annotation['category_id'] using attr_option_id_to_category_id[]
// - release as script in via website for others
////////////////////////////////////////////////
////////////////////////////////////////////////
        video.addEventListener('seeked', on_video_seeked);
        video.addEventListener('loadeddata', function() {
          frame_canvas.width = video.videoWidth;
          frame_canvas.height = video.videoHeight;
          time_index = 0;
          video.currentTime = parseFloat(time_list[time_index]);
        });
        video.setAttribute('src', filename);
      }

      function on_video_seeked(e) {
        if(cancel_process) {
          document.getElementById('log').innerHTML += '<br/>Cancelled';
          return;
        }
        var filename = filename_list[filename_index];
        var time = time_list[time_index];

        if(download_image) {
          document.getElementById('log').innerHTML += e.target.currentTime + 's, ';
          //var canvas = document.getElementById('frame_canvas');
          var ctx = frame_canvas.getContext('2d', { 'alpha':false });
          ctx.drawImage(e.target, 0, 0);
        }

        for(var i=0; i<current_framedata[time]['regions'].length; ++i) {
          var x = current_framedata[time]['regions'][i][0];
          var y = current_framedata[time]['regions'][i][1];
          var w = current_framedata[time]['regions'][i][2];
          var h = current_framedata[time]['regions'][i][3];
          var insect_type_id = current_framedata[time]['insect_type_id'][i];

          if(draw_bbox) {
            ctx.strokeStyle = 'yellow';
            ctx.fillStyle = 'red';
            ctx.lineWidth = 4;

            var insect_name = ALL_INSECT_TYPE_LIST[insect_type_id];
            ctx.strokeRect(x, y, w, h);
          }

          var annotation = {
            'id':global_annotation_index,
            'image_id':framedata[filename][time]['image_id'],
            'category_id':insect_type_id,
            'segmentation':[[x, y, x+w, y, x+w, y+h, x, y+h]],
            'area':Number.parseFloat(Number.parseFloat(w*h).toFixed(3)),
            'bbox':[x, y, w, h],
            'iscrowd':0,
          };
          coco['annotations'].push(annotation);
          global_annotation_index = global_annotation_index + 1;
        }

        var image = {
          'id':framedata[filename][time]['image_id'],
          'width':frame_canvas.width,
          'height':frame_canvas.height,
          'file_name':framedata[filename][time]['image_filename'],
          'license':'Copyright of Steve Hallam',
          'flickr_url':'',
          'coco_url':'',
          'date_captured':'',
        };
        coco['images'].push(image);

        if(download_image) {
          var image = frame_canvas.toDataURL('image/jpeg').replace('image/jpeg', 'image/octet-stream');
          download_as_file(image, framedata[filename][time]['image_filename']);
        }

        time_index = time_index + 1;
        if (time_index < time_list.length) {
          e.target.currentTime = parseFloat(time_list[time_index]);
        } else {
          filename_index = filename_index + 1;
          time_index = -1;
          extract_all_frames();
        }
      }

      function download_as_file(dataurl, filename) {
        var a      = document.createElement('a');
        a.href     = dataurl;
        a.download = filename;

        // simulate a mouse click event
        var event = new MouseEvent('click', {
          view: window,
          bubbles: true,
          cancelable: true
        });
        a.dispatchEvent(event);
      }

      /**
       * Randomly shuffle an array
       * https://stackoverflow.com/a/2450976/1293256
       * @param  {Array} array The array to shuffle
       * @return {String}      The first item in the shuffled array
       */
      function shuffle_array(original_array) {
        var array = original_array.slice();
	      var currentIndex = array.length;
	      var temporaryValue, randomIndex;

	      // While there remain elements to shuffle...
	      while (0 !== currentIndex) {
		      // Pick a remaining element...
		      randomIndex = Math.floor(Math.random() * currentIndex);
		      currentIndex -= 1;

		      // And swap it with the current element.
		      temporaryValue = array[currentIndex];
		      array[currentIndex] = array[randomIndex];
		      array[randomIndex] = temporaryValue;
	      }

	      return array;
      };

    </script>
  </body>
</html>
